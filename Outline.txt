
'''
adc {
    miso_pin
    mosi_pin
    sclk_pin
    cs_pin
    
    read_data(input_num)  
}

sensor {
    conversion function
    filepath to save
    String: name
    ADC: to read from
    ADC_input_num: input_on_adc
    
    display_strategy: func
    save_strategy(filepath): func
    
    #update(){
    
        #read from adc
        #save (maybe buffer to reduce write operations)
        
        #display: uses display strategy
    }
}

[var0, var1, var2]

for each var:
    var.update()


'''





const ctx = document.getElementById('myChart').getContext('2d');

  const data = {
    labels: [],
    datasets: [{
      label: 'Live Data',
      borderColor: 'rgba(75, 192, 192, 1)',
      backgroundColor: 'rgba(75, 192, 192, 0.2)',
      data: [],
      fill: true,
      tension: 0.1
    }]
  };

  const config = {
    type: 'line',
    data: data,
    options: {
      responsive: true,
      scales: {
        x: {
          type: 'linear',
          position: 'bottom'
        },
        y: {
          beginAtZero: false
        }
      },
      animation: {
        duration: 0
      }
    }
  };

const chart = new Chart(ctx, config);

Papa.parse(csvData, {
      complete: function (results) {
        const parsedData = results.data;
        const validData = parsedData.filter(row => row.length >= 2 && !isNaN(row[1]));
        const newLabels = validData.map(row => row[0]);
        const newData = validData.map(row => row[1]);
        data.labels = newLabels;
        data.datasets[0].data = newData
        chart.update();
      }
    });